<?xml version="1.0" encoding="utf-8" ?>
<diff xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <add sel="//init/create_group[@groupname='$miningtargets']" pos="after">
    <!-- This will insert the creation of the mine targeting group directly after the other creation calls. -->
    <create_group groupname="$minetargets"/>
  </add>
  <!-- This will insert the clearing of the mine targets group directly after the other clear calls. -->
  <add sel="/aiscript/attention[@min='visible']/actions//do_if[@value='@$allowothertargets or $turretmodes.indexof.{weaponmode.attackenemies} or $turretmodes.indexof.{weaponmode.attackcapital} or $turretmodes.indexof.{weaponmode.attackfighters} or ($defencedronemode == dronemode.attackenemies and this.assignedcontrolled.hasarmeddefencedrones)']/clear_table[@table='$table_targets']" pos="before">
    <clear_group group="$minetargets"/>
  </add>
  <!-- This will insert the mine-detecting logic immediately after the existing find_gravidar_contact call. -->
  <add sel="/aiscript/attention[@min='visible']/actions//do_if[@value='@$allowothertargets or $turretmodes.indexof.{weaponmode.attackenemies} or $turretmodes.indexof.{weaponmode.attackcapital} or $turretmodes.indexof.{weaponmode.attackfighters} or ($defencedronemode == dronemode.attackenemies and this.assignedcontrolled.hasarmeddefencedrones)']/do_if[@value='this.sector']/find_gravidar_contact[@groupname='$evaltargets']" pos="after">
    <!-- Use a gravidar-restricted search to find all of the mines near the ship in question.
         Note that due to some mines having NULL as an owner, this logic ignores the property maybeattackedby. -->
    <find_gravidar_contact groupname="$minetargets" object="this.ship" class="class.mine" checkoperational="false" docked="false" multiple="true">
      <match_context macro="this.sector.macro"/>
      <match_distance object="this.ship" max="this.ship.maxradarrange"/>
      <match class="class.buildstorage" negate="true"/>
      <match state="componentstate.wreck" negate="true"/>
    </find_gravidar_contact>
    <!-- Remove any mines that are not a threat to this ship -->
    <do_all exact="$minetargets.count" counter="$m" reverse="true">
      <set_value name="$mine" exact="$minetargets.{$m}"/>
      <!-- Remove friend/foe mines that are not targeting this ship and that do not list this ship's owning faction as an enemy. -->
      <do_if value="($mine.isfriendfoe and not $mine.foelist.indexof.{this.ship.owner}) and not ($mine.target == this.ship)">
        <!-- Adding some logging for player vessels only to keep track of how mines are removed from the list. -->
        <do_if value="$minetargets.count and this.ship.isplayerowned">
          <debug_to_file name="'minedefence.log'" directory="'minedefence'" append="true" chance="100"  text="'Mine Defence - Find Enemies - %s was a f/f mine not considered hostile to %s. Removing from target list.'.[$mine.knownname, this.ship.knownname]"/>
        </do_if>
        <remove_from_group group="$minetargets" object="$mine" />
      </do_if>
      <!-- Remove mines owned by the same faction as this ship, since they won't blow up on this ship. -->
      <do_if value="$mine.owner == this.ship.owner">
        <!-- Adding some logging for player vessels only to keep track of how mines are removed from the list. -->
        <do_if value="$minetargets.count and this.ship.isplayerowned">
          <debug_to_file name="'minedefence.log'" directory="'minedefence'" append="true" chance="100"  text="'Mine Defence - Find Enemies - %s was a f/f mine not considered hostile to %s. Removing from target list.'.[$mine.knownname, this.ship.knownname]"/>
        </do_if>
        <remove_from_group group="$minetargets" object="$mine" />
      </do_if>
      <!-- Clean up at the end of the loop so the next loop doesn't have problems. -->
      <remove_value name="$mine" />
    </do_all>
    <!-- Adding some logging for player vessels only to determine how many mines were found. -->
    <do_if value="$minetargets.count and this.ship.isplayerowned">
      <debug_to_file name="'minedefence.log'" directory="'minedefence'" append="true" chance="100"  text="'Mine Defence - Find Enemies  - added %s mines to target list.'.[$minetargets.count]"/>
      <debug_to_file name="'minedefence.log'" directory="'minedefence'" append="true" chance="100"  text="'Mine Defence - Find Enemies  - total eval targets before adding mines: %s.'.[$evaltargets.count]"/>
	  </do_if>
    <!-- Add the remaining mines to the list of targets to be evaluated. These will be evaluated by lib.target.selection.singletarget via the
         AcquireTarget interrupt. -->
    <add_to_group groupname="$evaltargets" group="$minetargets"/>
    <!-- Adding some logging for player vessels only to determine how many mines were added. -->
    <do_if value="$minetargets.count and this.ship.isplayerowned">
      <debug_to_file name="'minedefence.log'" directory="'minedefence'" append="true" chance="100"  text="'Mine Defence - Find Enemies  - total eval targets after adding mines: %s.'.[$evaltargets.count]"/>
	  </do_if>
  </add>
</diff>